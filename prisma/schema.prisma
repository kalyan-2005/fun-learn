generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  name            String
  username        String     @unique
  email           String     @unique
  image           String?
  avatar          String?
  password        String?
  voiceid         String?
  imgurl          String?
  role            Role       @default(USER)
  lastLogin       DateTime[]
  emailVerified   DateTime?
  oneTimePassword String     @default(uuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  hearts          Int        @default(10)
  diamonds        Int        @default(100)
  supercoins      Int        @default(3)
  account         Account?
  profile         Profile?
  Quiz            Quiz[]
  score           score[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Quiz {
  id          String      @id @default(uuid())
  image       String?
  description String?
  category    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdByID String?
  modules     Module[]
  createdBy   User?       @relation(fields: [createdByID], references: [id])
  Submodule   Submodule[]
}

model Module {
  id         String      @id @default(uuid())
  title      String
  quizId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  quiz       Quiz        @relation(fields: [quizId], references: [id])
  submodules Submodule[]
}

model Submodule {
  id         String   @id @default(uuid())
  type       Type
  questions  Json
  quizId     String
  moduleId   String
  level      Int      @default(5)
  isUnlocked Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  module     Module   @relation(fields: [moduleId], references: [id])
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  score      score[]
}

enum Type {
  LECTURE
  ASSIGNMENT
}

model score {
  id          String    @id @default(uuid())
  score       Int
  submoduleId String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  submodule   Submodule @relation(fields: [submoduleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([submoduleId, userId])
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  ADMIN
  USER
}
